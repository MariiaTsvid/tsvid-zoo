// (C) 2011 Jan-Willem Krans (janwillem32 <at> hotmail.com)
// This file is part of Video pixel shader pack.
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

// r=5 blur
// This shader should not be run as a screen space pixel shader.
// This shader requires compiling with ps_2_a, but higher is better, see http://en.wikipedia.org/wiki/Pixel_shader to look up what PS version your video card supports.
// If possible, avoid compiling with the software emulation modes (ps_?_sw). Pixel shaders require a lot of processing power to run in real-time software mode.
// This shader is meant to work with linear RGB input and output. Regular R'G'B' with a video gamma encoding will have to be converted with the linear gamma shaders to work properly.
// Use this shader to blur an image.
// This shader uses the same sampling area as "r=5, sharpen complex, deband and denoise". This shader can be used to test the maximum deband and denoise capacity.

sampler s0;
float2 c1 : register(c1);
#define sp(a, b) tex2D(s0, tex+c1*float2(a, b))

float4 main(float2 tex : TEXCOORD0) : COLOR
{
	return (sp(0, 0)+sp(-5, -1)+sp(-5, -2)+sp(-4, -3)+sp(-3, -4)+sp(-2, -5)+sp(-1, -5)+sp(0, -5)+sp(4, -3)+sp(3, -4)+sp(1, -5)+sp(2, -5)+sp(-5, 2)+sp(-5, 1)+sp(-5, 0)+sp(5, 0)+sp(5, -1)+sp(5, -2)+sp(-2, 5)+sp(-1, 5)+sp(-3, 4)+sp(-4, 3)+sp(0, 5)+sp(1, 5)+sp(2, 5)+sp(3, 4)+sp(4, 3)+sp(5, 2)+sp(5, 1)+sp(-4, -1)+sp(-4, -2)+sp(-3, -2)+sp(-3, -3)+sp(-2, -3)+sp(-2, -4)+sp(-1, -4)+sp(0, -4)+sp(2, -3)+sp(3, -3)+sp(1, -4)+sp(2, -4)+sp(-4, 2)+sp(-3, 2)+sp(-4, 1)+sp(-4, 0)+sp(4, 0)+sp(4, -1)+sp(3, -2)+sp(4, -2)+sp(-2, 4)+sp(-1, 4)+sp(-3, 3)+sp(-2, 3)+sp(0, 4)+sp(1, 4)+sp(2, 4)+sp(2, 3)+sp(3, 3)+sp(3, 2)+sp(4, 2)+sp(4, 1)+sp(-2, -2)+sp(-3, -1)+sp(-1, -3)+sp(0, -3)+sp(2, -2)+sp(1, -3)+sp(-3, 1)+sp(-3, 0)+sp(3, 1)+sp(3, 0)+sp(-1, 3)+sp(-2, 2)+sp(0, 3)+sp(1, 3)+sp(2, 2)+sp(3, -1)+sp(-2, -1)+sp(-1, -2)+sp(0, -2)+sp(1, -2)+sp(-2, 1)+sp(-2, 0)+sp(2, 0)+sp(2, -1)+sp(-1, 2)+sp(0, 2)+sp(1, 2)+sp(2, 1)+sp(-1, -1)+sp(0, -1)+sp(1, -1)+sp(-1, 0)+sp(1, 0)+sp(-1, 1)+sp(0, 1)+sp(1, 1))/97.;// blurred output
}