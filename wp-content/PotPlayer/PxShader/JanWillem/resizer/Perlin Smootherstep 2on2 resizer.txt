// (C) 2011 Jan-Willem Krans (janwillem32 <at> hotmail.com)
// This file is part of Video pixel shader pack.
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

// Perlin Smootherstep2×2 resizer
// This shader should be run as a screen space pixel shader if you are up-scaling.
// This shader should not be run as a screen space pixel shader if you are down-scaling.
// This shader requires compiling with ps_2_0, but higher is better, see http://en.wikipedia.org/wiki/Pixel_shader to look up what PS version your video card supports.
// If possible, avoid compiling with the software emulation modes (ps_?_sw). Pixel shaders require a lot of processing power to run in real-time software mode.
// This shader is meant to work with linear RGB input and output. Regular R'G'B' with a video gamma encoding will have to be converted with the linear gamma shaders to work properly.
// Use this shader to scale an image by Perlin Smootherstep2×2 interpolation.

// fractions, either decimal or not, are allowed
// set the magnification factor
#define Magnify (4/3.)

sampler s0;
float2 c0;
float2 c1;
#define sp(a, b, c) float4 a = tex2D(s0, tex+c1*float2(b, c));

float4 main(float2 tex : TEXCOORD0) : COLOR
{
	tex = (tex/Magnify+.5-.5/Magnify)*c0;// normalize to texture width in pixels
	float2 t = frac(tex);// calculate the difference between the output pixel and the original surrounding two pixels
	tex = (tex-t+.5)*c1;// adjust sampling matrix to put the ouput pixel in the interval [Q0, Q1)
	// weights
	float2 w1 = ((6*t-15.)*t+10.)*pow(t, 3);
	float2 w0 = 1.-w1;

	// original pixels
	sp(M0, 0, 0) sp(M1, 0, 1)
	sp(L0, 1, 0) sp(L1, 1, 1)

	// vertical interpolation
	float4 Q0 = M0*w0.y+M1*w1.y;
	float4 Q1 = L0*w0.y+L1*w1.y;
	return Q0*w0.x+Q1*w1.x;// horizontal interpolation and output
}