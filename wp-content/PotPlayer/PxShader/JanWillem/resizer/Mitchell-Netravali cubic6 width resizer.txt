// (C) 2011 Jan-Willem Krans (janwillem32 <at> hotmail.com)
// This file is part of Video pixel shader pack.
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

// Mitchell-Netravali cubic6 width resizer
// This shader should be run as a screen space pixel shader if you are up-scaling.
// This shader should not be run as a screen space pixel shader if you are down-scaling.
// This shader requires compiling with ps_2_a, but higher is better, see http://en.wikipedia.org/wiki/Pixel_shader to look up what PS version your video card supports.
// If possible, avoid compiling with the software emulation modes (ps_?_sw). Pixel shaders require a lot of processing power to run in real-time software mode.
// This shader is meant to work with linear RGB input and output. Regular R'G'B' with a video gamma encoding will have to be converted with the linear gamma shaders to work properly.
// Use this shader to scale the width of an image by Mitchell-Netravali cubic6 interpolation.

// fractions, either decimal or not, are allowed
// set the magnification factor
#define Magnify (4/3.)

sampler s0;
float c0;
float c1;
#define sp(a, b) float4 a = tex2D(s0, float2(coord+b*fx*c1, tex.y));

float4 main(float2 tex : TEXCOORD0) : COLOR
{
	float coord = (tex.x/Magnify+.5-.5/Magnify)*c0;// assign the output position, normalized to texture width in pixels
	float t = frac(coord);// calculate the difference between the output pixel and the original surrounding two pixels
	// adjust sampling matrix to put the ouput pixel in the interval [Q2, Q2+.5]
	float fx;
	if(t > .5) {coord = (coord-t+1.5)*c1; t = 1.-t; fx = -1;}
	else {coord = (coord-t+.5)*c1; fx = 1;}
	t *= 4;// compensate for the two iterations

	sp(Q0, -2) sp(Q1, -1) sp(Q2, 0) sp(Q3, 1) sp(Q4, 2)// original pixels
	if(t <= 1) return (((Q0*1085/186624.+Q2*329/2592.+Q4*1435/186624.-Q1*6377/93312.-Q3*6727/93312.)*t+Q1*2585/15552.+Q3*2635/15552.-Q0*425/31104.-Q2*265/864.-Q4*475/31104.)*t+(Q0-Q4)*205/20736.+(Q3-Q1)*1501/10368.)*t+(Q1+Q3)*31/2592.+Q2*845/864.-(Q0+Q4)*5/5184.;// output interpolated value for the interval [Q2, Q2+.25]
	sp(Q5, 3)// sample an additional pixel
	t -= 1.;
	return (((Q0*175/124416.+Q2*3955/186624.+Q4*1645/373248.+Q5*175/373248.-Q1*3745/373248.-Q3*1085/62208.)*t+Q1*1765/62208.+Q3*155/5184.-Q0*25/10368.-Q2*1645/31104.-Q4*5/1944.-Q5*25/62208.)*t+Q3*77/288.-(Q1+Q4)*5/288.-Q2*67/288.)*t+Q0*25/23328.+Q2*2069/2592.+Q3*5927/23328.-Q1*815/23328.-Q4*215/11664.;// output interpolated value for the interval (Q2+.25, Q2+.5]
}