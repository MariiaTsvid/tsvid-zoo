// (C) 2011 Jan-Willem Krans (janwillem32 <at> hotmail.com)
// This file is part of Video pixel shader pack.
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

// color gate inverse for RGB
// This shader should not be run as a screen space pixel shader.
// This shader requires compiling with ps_2_0, but higher is better, see http://en.wikipedia.org/wiki/Pixel_shader to look up what PS version your video card supports.
// If possible, avoid compiling with the software emulation modes (ps_?_sw). Pixel shaders require a lot of processing power to run in real-time software mode.
// This shader is meant to work with linear RGB input and output. Regular R'G'B' with a video gamma encoding will have to be converted with the linear gamma shaders to work properly.
// This shader can be used to turn an interval of colors to grayscale.

// fractions, either decimal or not, are allowed
// Video data carried by a floating point surface format can have values beyond the regular intervals.
// RedMinimum, GreenMinimum and BlueMinimum, regular interval [0, 1]
#define RedMinimum -9
#define GreenMinimum -9
#define BlueMinimum -9
// RedMaximum, GreenMaximum and BlueMaximum, regular interval [0, 1]
#define RedMaximum 9
#define GreenMaximum 9
#define BlueMaximum 9

sampler s0;

float4 main(float2 tex : TEXCOORD0) : COLOR
{
	float4 s1 = tex2D(s0, tex);// original pixel
	if(s1.x >= RedMinimum && s1.x <= RedMaximum && s1.y >= GreenMinimum && s1.y <= GreenMaximum && s1.z >= BlueMinimum && s1.z <= BlueMaximum) return (length(s1.rgb)/sqrt(3));// grayscale output
	return s1;// gate for the original pixel
}