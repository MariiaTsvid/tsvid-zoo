// (C) 2011 Jan-Willem Krans (janwillem32 <at> hotmail.com)
// This file is part of Video pixel shader pack.
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

// wave, Catmull-Rom spline4×4 interpolated
// This shader should be run as a screen space pixel shader if you are up-scaling.
// This shader should not be run as a screen space pixel shader if you are down-scaling.
// This shader requires compiling with ps_2_a, but higher is better, see http://en.wikipedia.org/wiki/Pixel_shader to look up what PS version your video card supports.
// If possible, avoid compiling with the software emulation modes (ps_?_sw). Pixel shaders require a lot of processing power to run in real-time software mode.
// This shader is meant to work with linear RGB input and output. Regular R'G'B' with a video gamma encoding will have to be converted with the linear gamma shaders to work properly.
// Use this shader to add a waving effect to a video.

// fractions, either decimal or not, are allowed
// set the waving speed in Hz, interval [0, 20]
#define WaveSpeed 2
// set the maximum wave displacement, interval [0, 1]
#define WaveDisplacement .0625
// set the magnification factor, this is used to overscan or underscan the black borders
#define Magnify (1.+2*WaveDisplacement)// overscan
//#define Magnify (1.-2*WaveDisplacement)// underscan

sampler s0;
float4 c0;
float2 c1;
#define sp(a, b, c) float4 a = tex2D(s0, tex+c1*float2(b, c));

float4 main(in float2 tex : TEXCOORD0) : COLOR
{
	tex += sin(tex.x+c0.w*WaveSpeed)*WaveDisplacement;// wave the sampled coordinates around
	tex = (tex/Magnify+.5-.5/Magnify)*c0.xy;// assign the output position, normalized to texture width in pixels
	if(!(tex.x > 0 && tex.x < c0.x && tex.y > 0 && tex.y < c0.y)) return float4(0, 0, 0, 1);//output black borders

	float2 t = frac(tex);// calculate the difference between the output pixel and the original surrounding two pixels
	tex = (tex-t+.5)*c1;// make the sampling position line up with an exact pixel coordinate for L1, normalized to the interval [0, 1)
	// weights
	float2 t2 = pow(t, 2);
	float2 t3 = pow(t, 3);
	float2 w0 = t2-(t3+t)/2.;
	float2 w1 = t3*1.5+1.-t2*2.5;
	float2 w2 = t2*2+t/2.-t3*1.5;
	float2 w3 = (t3-t2)/2.;

	// original pixels
	sp(M0, -1, -1) sp(M1, -1, 0) sp(M2, -1, 1) sp(M3, -1, 2)
	sp(L0, 0, -1) sp(L1, 0, 0) sp(L2, 0, 1) sp(L3, 0, 2)
	sp(K0, 1, -1) sp(K1, 1, 0) sp(K2, 1, 1) sp(K3, 1, 2)
	sp(J0, 2, -1) sp(J1, 2, 0) sp(J2, 2, 1) sp(J3, 2, 2)

	// vertical interpolation
	float4 Q0 = M0*w0.y+M1*w1.y+M2*w2.y+M3*w3.y;
	float4 Q1 = L0*w0.y+L1*w1.y+L2*w2.y+L3*w3.y;
	float4 Q2 = K0*w0.y+K1*w1.y+K2*w2.y+K3*w3.y;
	float4 Q3 = J0*w0.y+J1*w1.y+J2*w2.y+J3*w3.y;
	return Q0*w0.x+Q1*w1.x+Q2*w2.x+Q3*w3.x;// horizontal interpolation and output
}